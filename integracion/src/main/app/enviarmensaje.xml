<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:db="http://www.mulesoft.org/schema/mule/db" xmlns:jms="http://www.mulesoft.org/schema/mule/jms" xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw" xmlns:ws="http://www.mulesoft.org/schema/mule/ws" xmlns:metadata="http://www.mulesoft.org/schema/mule/metadata" xmlns:json="http://www.mulesoft.org/schema/mule/json" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:validation="http://www.mulesoft.org/schema/mule/validation" xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/validation http://www.mulesoft.org/schema/mule/validation/current/mule-validation.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd
http://www.mulesoft.org/schema/mule/ws http://www.mulesoft.org/schema/mule/ws/current/mule-ws.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/jms http://www.mulesoft.org/schema/mule/jms/current/mule-jms.xsd
http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd">
    <jms:activemq-connector name="Active_MQ" username="${jm.aquser}" password="${jm.aqpassword}" brokerURL="tcp://localhost:61616" validateConnections="true" doc:name="Active MQ"/>
    <http:request-config name="HTTP_Request_Configuration" doc:name="HTTP Request Configuration"/>
    <flow name="enviarmensajeFlow">
        <http:listener config-ref="HTTP_Listener_Configuration" path="/enviarmsj" doc:name="End point servicio envio msj"/>
        <json:validate-schema schemaLocation="jsonenviarmsj.json" doc:name="Validador estructura JSON"/>
        <json:json-to-object-transformer returnClass="java.util.HashMap" doc:name="JSON a Object"/>
        <validation:all doc:name="Validacion campos">
            <validation:validations>
                <validation:is-not-empty value="#[payload.Enviarmsj.mensaje]" message="#['El mensaje no puede estar vacio']"/>
                <validation:is-number value="#[payload.Enviarmsj.abonadodestino]" numberType="LONG" message="#['El abonado de destino es incorrecto']"/>
                <validation:is-number value="#[payload.Enviarmsj.abonadoorigen]" numberType="LONG" message="#['Numero de abonado de origen incorrecto']"/>
                <validation:matches-regex value="#[payload.Enviarmsj.abonadodestino]" regex="[0-9]{10}" message="#['Abonado destino incorrecto']"/>
                <validation:matches-regex value="#[payload.Enviarmsj.abonadoorigen]" regex="[0-9]{10}" message="#['Abonado de origen incorrecto']"/>
            </validation:validations>
        </validation:all>
        <set-variable variableName="enviar" value="#[payload]" doc:name="Variable envio msj"/>
        <dw:transform-message metadata:id="6ff5db99-8070-4a53-8ec5-6fbb5ac2358b" doc:name="Transformador consumo servicio">
            <dw:input-variable variableName="enviar"/>
            <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	ConsultarOperador:{
		numeroabonado:flowVars.enviar.Enviarmsj.abonadodestino
	}
}]]></dw:set-payload>
        </dw:transform-message>
        <http:request config-ref="HTTP_Request_Configuration" path="/portabilidadnumerica/consultaroperador" method="POST" host="localhost" port="8081" doc:name="Servicio consultar operador"/>
        <json:json-to-object-transformer returnClass="java.util.HashMap" encoding="UTF-8" doc:name="JSON a Objeto"/>
        <set-variable variableName="operador" value="#[payload]" encoding="UTF-8" doc:name="Variable operador destino"/>
        <choice doc:name="Choice">
            <when expression="#[flowVars.operador.ConsultarOperadorResponse.return.equalsIgnoreCase('No se encontr&#243; abonado')==true]">
                <dw:transform-message doc:name="Mensaje Respuesta">
                    <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	respuesta:{
		codigo:-1,
		respuesta:flowVars.operador.ConsultarOperadorResponse.return
	}
}]]></dw:set-payload>
                </dw:transform-message>
            </when>
            <otherwise>
                <dw:transform-message doc:name="Transformador consumo servicio">
                    <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	ConsultarOperador:{
		numeroabonado:flowVars.enviar.Enviarmsj.abonadoorigen
	}
}]]></dw:set-payload>
                </dw:transform-message>
                <http:request config-ref="HTTP_Request_Configuration" path="/portabilidadnumerica/consultaroperador" method="POST" host="localhost" port="8081" doc:name="Servicio consultar operador"/>
                <json:json-to-object-transformer returnClass="java.util.HashMap" encoding="UTF-8" doc:name="JSON a Objeto"/>
                <set-variable variableName="origen" value="#[payload]" doc:name="Variable operador origen"/>
                <choice doc:name="Choice">
                    <when expression="#[flowVars.origen.ConsultarOperadorResponse.return.equalsIgnoreCase('No se encontr&#243; abonado')==true]">
                        <dw:transform-message doc:name="Mensaje respuesta">
                            <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	respuesta:{
		codigo:-1,
		respuesta:flowVars.origen.ConsultarOperadorResponse.return
	}
}]]></dw:set-payload>
                        </dw:transform-message>
                    </when>
                    <otherwise>
                        <dw:transform-message doc:name="Transformador consumo servicio">
                            <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	Registrarmensaje:{
		numero:flowVars.enviar.Enviarmsj.abonadoorigen,
		numerodestino:flowVars.enviar.Enviarmsj.abonadodestino
	}
}]]></dw:set-payload>
                        </dw:transform-message>
                        <http:request config-ref="HTTP_Request_Configuration" path="/procedimientos/registrarmensaje" method="POST" host="localhost" port="8081" doc:name="Servicio registrar mensaje"/>
                        <json:json-to-object-transformer returnClass="java.util.HashMap" encoding="UTF-8" doc:name="JSON a Objeto"/>
                        <choice doc:name="Choice">
                            <when expression="#[payload.codigo.equalsIgnoreCase('COD-0000')==true]">
                                <choice doc:name="Choice">
                                    <when expression="#[flowVars.operador.ConsultarOperadorResponse.return.equals('14')==true]">
                                        <dw:transform-message doc:name="Transformador Teletrim">
                                            <dw:set-payload><![CDATA[%dw 1.0
%output application/xml
---
{
	mensajeT:{
	abonadodestino:flowVars.enviar.Enviarmsj.abonadodestino,
	abonadoorigen:flowVars.enviar.Enviarmsj.abonadoorigen,
	operadororigen:flowVars.origen.ConsultarOperadorResponse.return,
	operadordestino:flowVars.operador.ConsultarOperadorResponse.return,
	mensaje:flowVars.enviar.Enviarmsj.mensaje
	}
}]]></dw:set-payload>
                                        </dw:transform-message>
                                        <object-to-string-transformer doc:name="Objeto a Cadena"/>
                                        <jms:outbound-endpoint queue="${jm.colaTeletrim}" connector-ref="Active_MQ" doc:name="Cola Teletrim"/>
                                        <dw:transform-message doc:name="Respuesta">
                                            <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	respuesta:{
		codigo:1,
		respuesta:"Enviado"
	}
}]]></dw:set-payload>
                                        </dw:transform-message>
                                    </when>
                                    <when expression="#[flowVars.operador.ConsultarOperadorResponse.return.equals('16')==true]">
                                        <dw:transform-message doc:name="Transformador Mensatel">
                                            <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	numerodestino:flowVars.enviar.Enviarmsj.abonadodestino,
	mensaje:flowVars.enviar.Enviarmsj.mensaje
}]]></dw:set-payload>
                                        </dw:transform-message>
                                        <object-to-string-transformer doc:name="Objeto a cadena"/>
                                        <jms:outbound-endpoint queue="${jm.colaMensatel}" connector-ref="Active_MQ" doc:name="Cola Mensatel"/>
                                        <dw:transform-message doc:name="respuesta">
                                            <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	respuesta:{
		codigo:1,
		respuesta:"Enviado"
	}
}]]></dw:set-payload>
                                        </dw:transform-message>
                                    </when>
                                    <when expression="#[flowVars.operador.ConsultarOperadorResponse.return.equals('12')==true]">
                                        <dw:transform-message doc:name="Transformador Alfacom">
                                            <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	operador:flowVars.operador.ConsultarOperadorResponse.return,
	numerodestino:flowVars.enviar.Enviarmsj.abonadodestino,
	numeroorigen:flowVars.enviar.Enviarmsj.abonadoorigen,
	mensaje:flowVars.enviar.Enviarmsj.mensaje
}]]></dw:set-payload>
                                        </dw:transform-message>
                                        <object-to-string-transformer doc:name="Objeto a Cadena"/>
                                        <jms:outbound-endpoint queue="${jm.colaAlfacom}" connector-ref="Active_MQ" doc:name="Cola Alfacom"/>
                                        <dw:transform-message doc:name="Respuesta">
                                            <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	respuesta:{
		codigo:1,
		mensaje:"Enviado"
	}
}]]></dw:set-payload>
                                        </dw:transform-message>
                                    </when>
                                    <otherwise>
                                        <logger level="INFO" doc:name="Logger"/>
                                    </otherwise>
                                </choice>
                            </when>
                            <otherwise>
                                <dw:transform-message doc:name="Mensaje respuesta">
                                    <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	respuesta:{
		codigo:-1,
		respuesta:"No posee suficientes mensajes"
	}
}]]></dw:set-payload>
                                </dw:transform-message>
                            </otherwise>
                        </choice>
                    </otherwise>
                </choice>
            </otherwise>
        </choice>

        <choice-exception-strategy doc:name="Excepciones Capturadas">
            <catch-exception-strategy when="#[exception.causeMatches('*JsonSchemaValidationException')]" doc:name="Excepcion estructura JSON">
                <set-payload value="#[exception]" doc:name="Captura del mensaje"/>
                <dw:transform-message doc:name="Transform Message">
                    <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	respuesta:{
		codigo:-1,
		respuesta:'Error estructura json'
	}
}]]></dw:set-payload>
                </dw:transform-message>
            </catch-exception-strategy>
            <catch-exception-strategy when="#[exception.causedBy(org.mule.extension.validation.api.MultipleValidationException)]" doc:name="Excepcion en los validadores">
                <set-payload value="#[exception]" doc:name="Captura del mensaje"/>
                <dw:transform-message doc:name="Transform Message">
                    <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	respuesta:{
		codigo:-2,
		respuesta:payload.message
	}
}]]></dw:set-payload>
                </dw:transform-message>
            </catch-exception-strategy>
        </choice-exception-strategy>
    </flow>
</mule>
